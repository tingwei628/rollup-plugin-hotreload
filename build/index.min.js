(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('crypto'), require('fs'), require('path'), require('stream')) :
	typeof define === 'function' && define.amd ? define(['exports', 'crypto', 'fs', 'path', 'stream'], factory) :
	(factory((global['rollup-plugin-hotreload'] = {}),global.crypto,global.fs,global.path,global.stream));
}(this, (function (exports,crypto,fs,path,stream) { 'use strict';

var _hashkey = crypto.randomBytes(6).toString('hex');
var obj = { reqNow: null, hashKey: _hashkey, copyStr: null, isAppend: false };
var rphPath = "/rollup-plugin-hotreload";
var buildPaths = [];
var isCopyFilePathToHotreloadJs = false;
var rootDir = null;
var copyPaths = [];
var rphServer = http.createServer().listen(9999);
function rph(options) {
  if (!options.rootDir) throw TypeError("rootDir is needed!");

  if (!Array.isArray(options.buildPaths)) throw SyntaxError("buildPaths must have at least ONE file");

  if (!options.templateHtmlPath) throw SyntaxError("templatePath html is needed!");

  rootDir = options.rootDir;
  buildPaths = options.buildPaths.slice();
  var is_stop_rph = !!options.isStopRPH;

  for (var index = 0; index < buildPaths.length; index++) {
    var element = buildPaths[index];
    if (!element[0] && !element[1]) {
      throw TypeError("both the first: build file path and \
    the second: source path are needed!");
    }
    copyPaths = copyPaths.concat("\"" + element[0] + "\"");
  }
  obj.copyStr = copyPaths.join(",");

  function sockethandlerTEST() {
    if (is_stop_rph) return;
    this.hashKey = crypto.randomBytes(6).toString('hex');
    if (rphServer) {
      rphServer.on('request', function (inReq, inRes) {
        if (inReq.url === rphPath && !inRes.finished) {
          this.reqNow = inReq;
          // set Header before write
          inRes.writeHead(200, {
            'Content-Type': 'text/event-stream',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive',
            'Access-Control-Allow-Origin': '*'
          });
          inRes.write("data: " + this.hashKey + "\n\n");
          inRes.end();
        }
      }.bind(this));
    }
    if (this.reqNow !== null) {
      this.reqNow.on('close', function () {
        console.warn("close isReload");
      });
    }
  }
  return {
    name: "rollup-plugin-hotreload",
    ongenerate: sockethandlerTEST.bind(obj),
    onwrite: function onwrite(opts) {
      // ONLY ONCE
      if (!isCopyFilePathToHotreloadJs) {
        console.log('isCopyFilePathToHotreloadJs-> ', isCopyFilePathToHotreloadJs);
        // read hotreload.js and inject loaded js
        // rootDir = build/
        // copy ./hotreload.js to ./build/js/hotreload.js
        // NOTE: hotreload.js in the same directory as rootDir
        fs.createReadStream("./hotreload.min.js").pipe(copyTransform).pipe(fs.createWriteStream("./" + rootDir + "/hotreload.min.js"));

        isCopyFilePathToHotreloadJs = true;
      }

      fs.readFile(path.join(__dirname, options.templateHtmlPath), "utf8", function (err, htmlString) {
        if (err) throw err;
        /*
          Inspired by rollup-plugin-generate-html-template@bengsfort
          How to append js in html
        */
        var newHtmlString = [htmlString.slice(0, htmlString.indexOf("</body>")), "<script type=\"text/javascript\" src=\"hotreload.min.js\"></script>\n", htmlString.slice(htmlString.indexOf("</body>"), htmlString.length)].join("");
        fs.writeFile(path.join(__dirname, "./" + rootDir + "/index.html"), newHtmlString, function (err) {
          if (err) throw err;
        });
      });
    }
  };
}
var copyTransform = new stream.Transform({
  transform: function transform(chunk, encoding, callback) {
    if (!obj.isAppend && obj.copyStr !== null) {
      this.push("var loadfilePath = [" + obj.copyStr + "];\n");
      obj.isAppend = true;
    }
    this.push(chunk);
  }
});

function bundle(config, dirname, outputpath, sourcefilepath) {
  var buildModule = { module: null, outputPath: null };
  var output1 = Object.assign({}, config.output, {
    file: path.join(dirname, outputpath)
  });
  var module1 = Object.assign({}, config, {
    input: path.join(dirname, sourcefilepath),
    output: output1
  });
  buildModule.module = module1;
  buildModule.outputPath = outputpath;
  return buildModule;
}

function multibundles(config, dirname) {
  if (!Array.isArray) {
    throw SyntaxError("Array.isArray is not supported!");
  }
  var buildArr = [];
  for (var index = 0; index < buildPaths.length; index++) {
    var element = buildPaths[index];
    if (!element[0] && !element[1]) {
      throw TypeError("both the first: build file path and \
      the second: source path are needed!");
    }
    buildArr = buildArr.concat(bundle(config, dirname, path.join(rootDir, element[0]), element[1]).module);
  }
  return buildArr;
}

exports.rph = rph;
exports.rphMultibundles = multibundles;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.min.js.map
